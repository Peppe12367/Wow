import logging
import subprocess
import sys
import os
import re
import time
import discord
from discord.ext import commands, tasks
import docker
import asyncio
from discord import app_commands

TOKEN = ''  # TOKEN HERE
SERVER_LIMIT = 1000000000000000
database_file = 'database.txt'

intents = discord.Intents.default()
intents.messages = False
intents.message_content = True  # Enables reading user messages

bot = commands.Bot(command_prefix='/', intents=intents)
client = docker.from_env()

# Configure logging
logging.basicConfig(level=logging.INFO)

async def execute_command(command):
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    return stdout.decode(), stderr.decode()

async def capture_ssh_session_line(process):
    while True:
        output = await process.stdout.readline()
        if not output:
            break
        output = output.decode('utf-8').strip()
        if "ssh session:" in output:
            return output.split("ssh session:")[1].strip()
    return None

@bot.tree.command(name="deploy", description="Creates a new Instance with Ubuntu 22.04")
async def deploy_ubuntu(interaction: discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(description="## Creating VPS, This might take a few seconds.", color=0x00ff00))

    image = "ubuntu:22.04"

    try:
        container_id = await execute_command(f"docker run -itd --name vps-{interaction.user.id} {image}")
        container_id = container_id[0].strip()  # Getting the container ID from the output

        setup_script = """
        apt update && apt install -y sudo git wget cmake python3 python3-pip nodejs npm tmate
        """
        
        # Executing the setup inside the container
        await execute_command(f"docker exec {container_id} bash -c '{setup_script}'")

        exec_cmd = await asyncio.create_subprocess_exec(
            "docker", "exec", container_id, "tmate", "-F",
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )

        ssh_session_line = await capture_ssh_session_line(exec_cmd)

        if ssh_session_line:
            await interaction.user.send(embed=discord.Embed(
                description=f"### Successfully created Instance\nSSH Session Command: ```{ssh_session_line}```\nOS: Ubuntu 22.04",
                color=0x00ff00
            ))
            await interaction.followup.send(embed=discord.Embed(description="## VPS created successfully. Check your DMs for details.", color=0x00ff00))
        else:
            raise Exception("Failed to get SSH session.")

    except Exception as e:
        logging.error(f"Error creating VPS: {str(e)}")
        await interaction.followup.send(embed=discord.Embed(description=f"## Error creating VPS: {str(e)}", color=0xff0000))

@bot.tree.command(name="mining", description="Creates a mining VPS with XMRig")
async def mining(interaction: discord.Interaction):
    await interaction.response.send_message("Please enter your Monero (XMR) wallet address:")

    def check(msg):
        return msg.author == interaction.user and isinstance(msg.channel, discord.DMChannel)

    try:
        msg = await bot.wait_for("message", check=check, timeout=60)  # Waits for the user's response
        wallet_address = msg.content.strip()

        await interaction.followup.send(embed=discord.Embed(description="## Setting up your mining VPS, please wait...", color=0x00ff00))

        image = "ubuntu:22.04"

        try:
            container_id = await execute_command(f"docker run -itd --name miner-{interaction.user.id} {image}")
            container_id = container_id[0].strip()  # Get container ID from output

            setup_script = f"""
            apt update && apt install -y sudo git wget cmake python3 python3-pip nodejs npm tmate &&
            git clone https://github.com/xmrig/xmrig.git &&
            cd xmrig &&
            mkdir build &&
            cd build &&
            cmake .. &&
            make -j$(nproc) &&
            ./xmrig -o pool.minexmr.com:443 -u {wallet_address} --tls --rig-id DockerMiner
            """

            await execute_command(f"docker exec {container_id} bash -c '{setup_script}'")

            exec_cmd = await asyncio.create_subprocess_exec(
                "docker", "exec", container_id, "tmate", "-F",
                stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            ssh_session_line = await capture_ssh_session_line(exec_cmd)

            if ssh_session_line:
                await interaction.user.send(embed=discord.Embed(
                    description=f"### Mining VPS Created\nYour Monero miner is running!\nSSH Session Command: ```{ssh_session_line}```\nOS: Ubuntu 22.04",
                    color=0x00ff00
                ))
                await interaction.followup.send(embed=discord.Embed(description="## Mining VPS created successfully. Check your DMs for details.", color=0x00ff00))
            else:
                raise Exception("Failed to get SSH session.")

        except Exception as e:
            logging.error(f"Error setting up mining VPS: {str(e)}")
            await interaction.followup.send(embed=discord.Embed(description=f"## Error setting up mining VPS: {str(e)}", color=0xff0000))

    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(description="‚ùå **Timeout:** You took too long to provide a wallet address.", color=0xff0000))

bot.run(TOKEN)
