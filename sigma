import random
import logging
import subprocess
import sys
import os
import re
import time
import discord
from discord.ext import commands, tasks
import docker
import asyncio
from discord import app_commands
from discord.ui import Modal, TextInput

# Configuration Constants
TOKEN = ''  # TOKEN HERE
database_file = 'database.txt'

# Discord Intents
intents = discord.Intents.default()
intents.messages = False
intents.message_content = False

bot = commands.Bot(command_prefix='/', intents=intents)
client = docker.from_env()

# Logging Configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

# Database Functions
def add_to_database(user, container_name, ssh_command):
    with open(database_file, 'a') as f:
        f.write(f"{user}|{container_name}|{ssh_command}\n")

def remove_from_database(ssh_command):
    if not os.path.exists(database_file):
        return
    with open(database_file, 'r') as f:
        lines = f.readlines()
    with open(database_file, 'w') as f:
        for line in lines:
            if ssh_command not in line:
                f.write(line)

def get_container_id_from_database(user, container_name):
    if not os.path.exists(database_file):
        return None
    with open(database_file, 'r') as f:
        for line in f:
            if line.startswith(user) and container_name in line:
                return line.split('|')[1]
    return None

# Create a modal to request wallet address
class MiningModal(Modal):
    def __init__(self, container_name: str):
        super().__init__(title="Monero Wallet Address")
        self.container_name = container_name
        self.wallet_address = None

        self.wallet_input = TextInput(label="Enter your Monero Wallet Address", style=discord.TextStyle.short, placeholder="Your Monero address here...")
        self.add_item(self.wallet_input)

    async def on_submit(self, interaction: discord.Interaction):
        self.wallet_address = self.wallet_input.value
        await interaction.response.send_message("Starting the mining process...")

        # Trigger the mining process and tmate function
        await start_mining_and_tmate(interaction, self.container_name, self.wallet_address)

    async def on_error(self, interaction: discord.Interaction, error: Exception):
        await interaction.response.send_message(f"An error occurred: {error}", ephemeral=True)

async def start_mining_and_tmate(interaction: discord.Interaction, container_name: str, wallet_address: str):
    user = str(interaction.user)
    container_id = get_container_id_from_database(user, container_name)

    if not container_id:
        await interaction.response.send_message(embed=discord.Embed(description="No active instance found for your user.", color=0xff0000))
        return

    try:
        # Start mining process inside the container (example for Monero mining)
        subprocess.run(["docker", "exec", container_id, "bash", "-c", f"monero-miner --wallet-address {wallet_address} --pool xmr.supported_pool_address"], check=True)

        # Start tmate session
        exec_cmd = await asyncio.create_subprocess_exec("docker", "exec", container_id, "tmate", "-F",
                                                        stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)

        ssh_session_line = await capture_ssh_session_line(exec_cmd)
        if ssh_session_line:
            await interaction.user.send(embed=discord.Embed(description=f"### Mining Started\nMonero Wallet Address: {wallet_address}\nSSH Session Command: ```{ssh_session_line}```", color=0x00ff00))
            await interaction.response.send_message(embed=discord.Embed(description="Mining started successfully. Check your DMs for details.", color=0x00ff00))
        else:
            await interaction.response.send_message(embed=discord.Embed(description="Failed to generate SSH session.", color=0xff0000))

    except subprocess.CalledProcessError as e:
        await interaction.response.send_message(embed=discord.Embed(description=f"Error starting mining: {e}", color=0xff0000))

# Define the /mining command
@bot.tree.command(name="mining", description="Starts mining Monero on your VPS with the given address and provides SSH access.")
@app_commands.describe(container_name="The name of your instance/container")
async def mining_command(interaction: discord.Interaction, container_name: str):
    # Ask for the Monero wallet address using a modal
    modal = MiningModal(container_name)
    await interaction.response.send_modal(modal)

# Ensure that the command tree is synced on startup
@bot.event
async def on_ready():
    await bot.tree.sync()

bot.run(TOKEN)
